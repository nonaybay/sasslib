@use 'sass:color';
@use 'sass:list';
@use 'sass:math';

@use '../variables/color' as variable;



@function get-red($color) {
  @return color.red($color);
}

@function get-green($color) {
  @return color.green($color);
}

@function get-blue($color) {
  @return color.blue($color);
}

// Put RGB value from range [0...255] to [0...1]
@function local-linear-srgb($value) {
  $value: math.div($value, variable.$rgb);
  $sign: if(($value < 0), -1, 1);
  $abs: math.abs($value);
  $condition: ($abs <= variable.$beta-delta);
  $true: math.div($value, variable.$delta);
  $false: ($sign * math.pow(math.div(($abs + variable.$malpha), variable.$alpha), variable.$gamma));

  @return if($condition, $true, $false);
}

@function linear-srgb($color) {
  $r: local-linear-srgb(get-red($color));
  $g: local-linear-srgb(get-green($color));
  $b: local-linear-srgb(get-blue($color));

  @return ($r, $g, $b);
}

@function get-luminance($color) {
  $linear: linear-srgb($color);
  $r: (list.nth($linear, 1) * variable.$yr);
  $g: (list.nth($linear, 2) * variable.$yg);
  $b: (list.nth($linear, 3) * variable.$yb);

  @return ($r + $g + $b);
}

@function contrast-ratio($color-a, $color-b) {
  $luminance-a: get-luminance($color-a);
  $luminance-b: get-luminance($color-b);
  $max: (math.max($luminance-a, $luminance-b) + variable.$contrast-hack);
  $min: (math.min($luminance-a, $luminance-b) + variable.$contrast-hack);

  @return math.div($max, $min);
}

@function get-tone($color) {
  $luminance: get-luminance($color);
  $condition: ($luminance < variable.$xb);
  $true: 'dark';
  $false: 'light';

  @return if($condition, $true, $false);
}

// https://codepen.io/jhogue/pen/jOEXxZe
@function get-ratio($level: 'AA', $size: 16, $bold: false, $forced: false) {
  $ratio-a: 3;
  $ratio-b: 4.5;
  $ratio-c: 7;

  @if $forced {
    $x: math.div(21, $ratio-c);
    $ratio-a: ($ratio-a * $x);
    $ratio-b: ($ratio-b * $x);
    $ratio-c: ($ratio-c * $x);
  }

  $ratio: $ratio-b;

  @if ($level == 'A') {
    $ratio: $ratio-a;
  } @else if ($level == 'AA') {
    $ratio: $ratio-b;
  } @else if ($level == 'AAA') {
    $ratio: $ratio-c;
  }

  @if ($size < 24) {
    @if (($size >= 19) and $bold) {
      @if ($level == 'AAA') {
        $ratio: $ratio-b;
      } @else {
        $ratio: $ratio-a;
      }
    }
  } @else {
    $ratio: $ratio-a;

    @if ($level == 'AAA') {
      $ratio: $ratio-b;
    }
  }

  @return $ratio;
}

@function a11y-color($foreground, $background, $level, $size, $bold, $forced) {
  
  $main-ratio: get-ratio($level, $size, $bold, $forced);
  $contrast: contrast-ratio($foreground, $background);
  $white-on-bg: contrast-ratio(white, $background);
  $black-on-bg: contrast-ratio(black, $background);
  $compute-temp-min-contrast: math.max($white-on-bg, $black-on-bg);
  $ratio: math.min($main-ratio, $compute-temp-min-contrast);

  @if ($contrast >= $ratio) {
    $foreground: $foreground;
  } @else {
    $foreground-lod: get-tone($foreground);
    $background-lod: get-tone($background);
    $step: 2%;

    $_c1: (($foreground-lod == 'light') and ($background-lod == 'light'));
    $_c2: (($foreground-lod == 'dark') and ($background-lod == 'light'));

    @if ($_c1 or $_c2) {
      $step: ($step * -1);
    }

    $step-sat: (math.div(math.abs($step), variable.$alpha) * -1);
    $step-lig: $step;
    
    // $foreground: color.adjust($foreground, $saturation: $step-sat);
    // $foreground: color.scale($foreground, $lightness: $step-lig);
    $foreground: color.scale($foreground, $saturation: $step-sat, $lightness: $step-lig);

    @return a11y-color($foreground, $background, $level, $size, $bold, $forced);
  }

  @if $forced {
    @debug 'contrast is forced';
  }

  @debug 'ratio:                                                  #{$main-ratio}';
  @debug 'contrast:                                               #{$contrast}';
  @debug 'contrast if white on background:                        #{$white-on-bg}';
  @debug 'contrast if black on background:                        #{$black-on-bg}';
  @debug 'computed max contrast acceptable:                       #{$compute-temp-min-contrast}';
  @debug 'ratio to be used, based on ratio and computed contrast: #{$ratio}';

  @if ($ratio < $main-ratio) {
    @debug 'pass, but contrast is not suficcient';
  }

  @return $foreground;
}
